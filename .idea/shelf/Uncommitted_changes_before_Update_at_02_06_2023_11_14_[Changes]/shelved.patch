Index: app/src/main/java/com/example/appvigile3/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.appvigile3\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.rounded.Close\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusDirection\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalFocusManager\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.text.input.VisualTransformation\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.example.appvigile3.ui.theme.AppVigile3Theme\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.withContext\r\nimport java.sql.DriverManager\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            AppVigile3Theme {\r\n                // A surface container using the 'background' color from the theme\r\n                Surface(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    color = MaterialTheme.colorScheme.background\r\n                ) {\r\n                    Acceuil()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndata class Article(\r\n    val scanrfid: String,\r\n    val codebarre: Int,\r\n    val nom: String,\r\n    val marque: String,\r\n    val prix: Float,\r\n    val stock: Int,\r\n    val checkstock: Int\r\n)\r\n\r\nclass DatabaseManager {\r\n    private val url = \"jdbc:mysql://172.20.31.144/appvigile\"\r\n    private val user = \"vigile_runtouz\"\r\n    private val password = \"runtouz2023\"\r\n\r\n    fun getArticle(): List<Article>{\r\n        val connection = DriverManager.getConnection(url, user, password)\r\n        val statement = connection.createStatement()\r\n        val resultSet = statement.executeQuery(\"SELECT * from produits\")\r\n\r\n        val articles = mutableListOf<Article>()\r\n        while (resultSet.next()) {\r\n\r\n            val dataObject = Article(\r\n                resultSet.getString(\"scanrfid\"),\r\n                resultSet.getInt(\"codebarre\"),\r\n                resultSet.getString(\"nom\"),\r\n                resultSet.getString(\"marque\"),\r\n                resultSet.getFloat(\"prix\"),\r\n                resultSet.getInt(\"stock\"),\r\n                resultSet.getInt(\"checkstock\")\r\n            )\r\n            articles.add(dataObject)\r\n        }\r\n        resultSet.close()\r\n        statement.close()\r\n        connection.close()\r\n\r\n        return articles\r\n    }\r\n}\r\n\r\n@Composable\r\nfun Acceuil(){\r\n    Column(modifier = Modifier.verticalScroll(rememberScrollState())) {\r\n\r\n        var idInput by remember { mutableStateOf(\"\") }\r\n        var mdpInput by remember { mutableStateOf(\"\") }\r\n        val focusManager = LocalFocusManager.current\r\n\r\n        Column(\r\n            verticalArrangement = Arrangement.Center, modifier = Modifier\r\n                .padding(32.dp)\r\n                /*.verticalScroll(\r\n                    rememberScrollState()\r\n                )*/\r\n        ) {\r\n            Spacer(modifier = Modifier.height(150.dp))\r\n            Text(\r\n                text = stringResource(id = R.string.TXTacceuil),\r\n                fontSize = 34.sp,\r\n                modifier = Modifier.align(Alignment.CenterHorizontally)\r\n            )\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n            Image(\r\n                painter = painterResource(R.drawable.runtouz_3),\r\n                contentDescription = stringResource(R.string.Logo),\r\n                modifier = Modifier.align(Alignment.CenterHorizontally)\r\n            )\r\n            Spacer(modifier = Modifier.height(24.dp))\r\n            ChampTxt(\r\n                label = R.string.Id,\r\n                keyboardOptions = KeyboardOptions.Default.copy(\r\n                    keyboardType = KeyboardType.Text,\r\n                    imeAction = ImeAction.Next\r\n                ),\r\n                keyboardActions = KeyboardActions(onNext = { focusManager.moveFocus(FocusDirection.Down) }),\r\n                value = idInput,\r\n                onValueChange = { idInput = it },\r\n                aspectClavier = VisualTransformation.None\r\n            )\r\n            Spacer(modifier = Modifier.height(40.dp))\r\n            ChampTxt(\r\n                label = R.string.mdp,\r\n                keyboardOptions = KeyboardOptions.Default.copy(\r\n                    keyboardType = KeyboardType.Password,\r\n                    imeAction = ImeAction.Done\r\n                ),\r\n                keyboardActions = KeyboardActions(onDone = { focusManager.clearFocus() }),\r\n                value = mdpInput,\r\n                onValueChange = { mdpInput = it },\r\n                aspectClavier = PasswordVisualTransformation()\r\n            )\r\n            Spacer(modifier = Modifier.height(120.dp))\r\n            Button(\r\n                onClick = {},\r\n                colors = ButtonDefaults.buttonColors(\r\n                    containerColor = Color.Blue,\r\n                    contentColor = Color.White\r\n                )\r\n            ) {\r\n                Text(text = stringResource(R.string.Connexion))\r\n            }\r\n            Spacer(modifier = Modifier.height(154.dp))\r\n            Row {\r\n                Text(text = stringResource(id = R.string.Runtouz_2023))\r\n            }\r\n        }\r\n        Spacer(modifier = Modifier.height(200.dp))\r\n        AucunArticle()\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun ChampTxt(label : Int,\r\n             value :String,\r\n             onValueChange :(String) -> Unit,\r\n             keyboardOptions: KeyboardOptions,\r\n             keyboardActions: KeyboardActions,\r\n             aspectClavier: VisualTransformation\r\n){\r\n    TextField(\r\n        value = value,\r\n        onValueChange = onValueChange,\r\n        label = { Text(text = stringResource(label)) },\r\n        singleLine = true,\r\n        keyboardOptions = keyboardOptions,\r\n        keyboardActions = keyboardActions,\r\n        modifier = Modifier.fillMaxWidth(),\r\n        visualTransformation = aspectClavier\r\n    )\r\n}\r\n\r\n@Composable\r\nfun AucunArticle() {\r\n    var popupControl by remember { mutableStateOf(false) }\r\n\r\n    Column(modifier = Modifier\r\n        .fillMaxWidth()\r\n        .fillMaxHeight()\r\n        .padding(32.dp),\r\n        //.verticalScroll(rememberScrollState()),\r\n        verticalArrangement = Arrangement.Center\r\n    ) {\r\n        Spacer(modifier = Modifier.height(250.dp))\r\n        Column(\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n        ) {\r\n            Text(text = stringResource(id = R.string.aucun_article), fontSize = 34.sp)\r\n            Spacer(modifier = Modifier.height(16.dp))\r\n            Image(\r\n                painter = painterResource(id = R.drawable.runtouz_3),\r\n                contentDescription = stringResource(id = R.string.Logo)\r\n            )\r\n            TextButton(onClick = {popupControl = true}) {\r\n                Text(text = \"popup\", color = Color.Black)\r\n            }\r\n            if(popupControl){\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .fillMaxHeight()\r\n                        .background(Color.Gray)\r\n                        .clickable { popupControl = false }\r\n                ){\r\n                    InfosArticle()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Spacer(modifier = Modifier.height(450.dp))\r\n    Row { Text(text = stringResource(id = R.string.Runtouz_2023)) }\r\n}\r\n\r\n@Composable\r\nfun InfosArticle() {\r\n    var result by remember { mutableStateOf(emptyList<Article>()) }\r\n\r\n    LaunchedEffect(Unit){\r\n        val data = withContext(Dispatchers.IO){\r\n            DatabaseManager().getArticle()\r\n        }\r\n        result = data\r\n    }\r\n     Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .fillMaxHeight()\r\n                .padding(32.dp)\r\n        ) {\r\n            Box(modifier = Modifier.align(Alignment.End)) {\r\n                IconButton(\r\n                    onClick = {\r\n                    }\r\n                ) {\r\n                    Icon(\r\n                        Icons.Rounded.Close,\r\n                        contentDescription = null\r\n                    )\r\n                }\r\n            }\r\n            Spacer(modifier = Modifier.height(35.dp))\r\n            Text(\r\n                text = stringResource(id = R.string.InfosArticle),\r\n                fontSize = 34.sp,\r\n                modifier = Modifier.align(Alignment.CenterHorizontally)\r\n            )\r\n            AfficheTexte(texte = stringResource(R.string.nom))\r\n            ArticleList(result, \"nom\")\r\n            AfficheTexte(texte = stringResource(R.string.code_barre))\r\n            ArticleList(result, \"code barre\")\r\n            AfficheTexte(texte = stringResource(R.string.marque))\r\n            ArticleList(result, \"marque\")\r\n            AfficheTexte(texte = stringResource(id = R.string.prix))\r\n            ArticleList(result, \"prix\")\r\n            Spacer(modifier = Modifier.height(300.dp))\r\n            Text(text = stringResource(id = R.string.Runtouz_2023))\r\n        }\r\n}\r\n\r\n@Composable\r\nfun AfficheTexte(texte : String){\r\n    Spacer(modifier = Modifier.height(150.dp))\r\n    Text(text = texte, fontSize = 20.sp)\r\n}\r\n\r\n@Composable\r\nfun ArticleList(articles: List<Article>, affiche : String){\r\n    Column{\r\n        articles.forEach { article ->\r\n            ArticleListItem(article, affiche)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun ArticleListItem(articles: Article, affiche: String){\r\n    Spacer(modifier = Modifier.height(50.dp))\r\n    when(affiche){\r\n        \"nom\" ->        Text(articles.nom, fontSize = 16.sp)\r\n        \"code barre\" -> Text(\"${articles.codebarre}\", fontSize = 16.sp)\r\n        \"marque\" ->     Text(articles.marque, fontSize = 16.sp)\r\n        \"prix\" ->       Text(\"${articles.prix}\", fontSize = 16.sp)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/appvigile3/MainActivity.kt b/app/src/main/java/com/example/appvigile3/MainActivity.kt
--- a/app/src/main/java/com/example/appvigile3/MainActivity.kt	(revision df71a4c55a8a25895e787906ef1c5f09f4b865bd)
+++ b/app/src/main/java/com/example/appvigile3/MainActivity.kt	(date 1685697166228)
@@ -4,8 +4,6 @@
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
 import androidx.compose.foundation.Image
-import androidx.compose.foundation.background
-import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
@@ -30,7 +28,6 @@
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Surface
 import androidx.compose.material3.Text
-import androidx.compose.material3.TextButton
 import androidx.compose.material3.TextField
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
@@ -51,6 +48,10 @@
 import androidx.compose.ui.text.input.VisualTransformation
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
+import androidx.navigation.NavController
+import androidx.navigation.compose.NavHost
+import androidx.navigation.compose.composable
+import androidx.navigation.compose.rememberNavController
 import com.example.appvigile3.ui.theme.AppVigile3Theme
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.withContext
@@ -66,12 +67,34 @@
                     modifier = Modifier.fillMaxSize(),
                     color = MaterialTheme.colorScheme.background
                 ) {
-                    Acceuil()
+                    Navigation()
                 }
             }
         }
     }
 }
+
+sealed class Screen(val route: String){
+    object Acceuil: Screen("ecran_acceuil")
+    object AucunArticle: Screen("ecran_aucunarticle")
+    object InfosArticle: Screen("ecran_infosarticle")
+}
+
+@Composable
+fun Navigation(){
+    val navController = rememberNavController()
+    NavHost(navController = navController, startDestination = Screen.Acceuil.route) {
+        composable(route = Screen.Acceuil.route){
+            Acceuil(navController = navController)
+        }
+        composable(route = Screen.AucunArticle.route){
+            AucunArticle(navController = navController)
+        }
+        composable(route = Screen.InfosArticle.route){
+            InfosArticle(navController = navController)
+        }
+    }
+}
 
 data class Article(
     val scanrfid: String,
@@ -84,21 +107,21 @@
 )
 
 class DatabaseManager {
-    private val url = "jdbc:mysql://172.20.31.144/appvigile"
-    private val user = "vigile_runtouz"
-    private val password = "runtouz2023"
+    private val url = "jdbc:mysql://172.20.100.33/runtouz"
+    private val user = "RunTouz"
+    private val password = "RunTouz2023"
 
     fun getArticle(): List<Article>{
         val connection = DriverManager.getConnection(url, user, password)
         val statement = connection.createStatement()
-        val resultSet = statement.executeQuery("SELECT * from produits")
+        val resultSet = statement.executeQuery("SELECT * from produits where rfid = \"0007366977 112,26945\"")
 
         val articles = mutableListOf<Article>()
         while (resultSet.next()) {
 
             val dataObject = Article(
-                resultSet.getString("scanrfid"),
-                resultSet.getInt("codebarre"),
+                resultSet.getString("rfid"),
+                resultSet.getInt("code_barre"),
                 resultSet.getString("nom"),
                 resultSet.getString("marque"),
                 resultSet.getFloat("prix"),
@@ -113,22 +136,39 @@
 
         return articles
     }
+
+    fun checkUser(id: String, mdp: String): Boolean{
+        val connection = DriverManager.getConnection(url, user, password)
+        val statement = connection.createStatement()
+        val query = "SELECT * from appvigile where identifiant = \"$id\" and mdp = \"$mdp\""
+        val resultSet = statement.executeQuery(query)
+
+        return resultSet.next()
+    }
 }
 
 @Composable
-fun Acceuil(){
-    Column(modifier = Modifier.verticalScroll(rememberScrollState())) {
+fun Acceuil(navController: NavController){
 
-        var idInput by remember { mutableStateOf("") }
-        var mdpInput by remember { mutableStateOf("") }
-        val focusManager = LocalFocusManager.current
+    var idInput by remember { mutableStateOf("") }
+    var mdpInput by remember { mutableStateOf("") }
+    var errormessage by remember { mutableStateOf("") }
+    var result by remember { mutableStateOf(false) }
+    val focusManager = LocalFocusManager.current
 
-        Column(
-            verticalArrangement = Arrangement.Center, modifier = Modifier
-                .padding(32.dp)
-                /*.verticalScroll(
-                    rememberScrollState()
-                )*/
+    LaunchedEffect(Unit){
+        val data = withContext(Dispatchers.IO){
+            DatabaseManager().checkUser(idInput, mdpInput)
+        }
+        result = data
+    }
+
+    Column(
+        verticalArrangement = Arrangement.Center, modifier = Modifier
+            .padding(32.dp)
+            .verticalScroll(
+                rememberScrollState()
+            )
         ) {
             Spacer(modifier = Modifier.height(150.dp))
             Text(
@@ -166,9 +206,18 @@
                 onValueChange = { mdpInput = it },
                 aspectClavier = PasswordVisualTransformation()
             )
+            Spacer(modifier = Modifier.height(60.dp))
+            Text(errormessage, color = Color.Red)
             Spacer(modifier = Modifier.height(120.dp))
             Button(
-                onClick = {},
+                onClick = {
+                    if(result){
+                        navController.navigate(Screen.AucunArticle.route)
+                    }
+                    else{
+                        errormessage = "Identifiants incorrects"
+                    }
+                },
                 colors = ButtonDefaults.buttonColors(
                     containerColor = Color.Blue,
                     contentColor = Color.White
@@ -181,9 +230,7 @@
                 Text(text = stringResource(id = R.string.Runtouz_2023))
             }
         }
-        Spacer(modifier = Modifier.height(200.dp))
-        AucunArticle()
-    }
+    Spacer(modifier = Modifier.height(200.dp))
 }
 
 @OptIn(ExperimentalMaterial3Api::class)
@@ -208,14 +255,12 @@
 }
 
 @Composable
-fun AucunArticle() {
-    var popupControl by remember { mutableStateOf(false) }
+fun AucunArticle(navController: NavController) {
 
     Column(modifier = Modifier
         .fillMaxWidth()
         .fillMaxHeight()
         .padding(32.dp),
-        //.verticalScroll(rememberScrollState()),
         verticalArrangement = Arrangement.Center
     ) {
         Spacer(modifier = Modifier.height(250.dp))
@@ -230,20 +275,9 @@
                 painter = painterResource(id = R.drawable.runtouz_3),
                 contentDescription = stringResource(id = R.string.Logo)
             )
-            TextButton(onClick = {popupControl = true}) {
-                Text(text = "popup", color = Color.Black)
-            }
-            if(popupControl){
-                Box(
-                    modifier = Modifier
-                        .fillMaxWidth()
-                        .fillMaxHeight()
-                        .background(Color.Gray)
-                        .clickable { popupControl = false }
-                ){
-                    InfosArticle()
-                }
-            }
+          Button(onClick = { navController.navigate(Screen.InfosArticle.route) }) {
+              Text(text = "texte")
+          }
         }
     }
     Spacer(modifier = Modifier.height(450.dp))
@@ -251,7 +285,7 @@
 }
 
 @Composable
-fun InfosArticle() {
+fun InfosArticle(navController: NavController) {
     var result by remember { mutableStateOf(emptyList<Article>()) }
 
     LaunchedEffect(Unit){
@@ -265,10 +299,11 @@
                 .fillMaxWidth()
                 .fillMaxHeight()
                 .padding(32.dp)
+                .verticalScroll(rememberScrollState())
         ) {
             Box(modifier = Modifier.align(Alignment.End)) {
                 IconButton(
-                    onClick = {
+                    onClick = { navController.navigate(Screen.AucunArticle.route)
                     }
                 ) {
                     Icon(
@@ -291,7 +326,7 @@
             ArticleList(result, "marque")
             AfficheTexte(texte = stringResource(id = R.string.prix))
             ArticleList(result, "prix")
-            Spacer(modifier = Modifier.height(300.dp))
+            Spacer(modifier = Modifier.height(250.dp))
             Text(text = stringResource(id = R.string.Runtouz_2023))
         }
 }
@@ -312,12 +347,12 @@
 }
 
 @Composable
-fun ArticleListItem(articles: Article, affiche: String){
+fun ArticleListItem(article: Article, affiche: String){
     Spacer(modifier = Modifier.height(50.dp))
     when(affiche){
-        "nom" ->        Text(articles.nom, fontSize = 16.sp)
-        "code barre" -> Text("${articles.codebarre}", fontSize = 16.sp)
-        "marque" ->     Text(articles.marque, fontSize = 16.sp)
-        "prix" ->       Text("${articles.prix}", fontSize = 16.sp)
+        "nom" ->        Text(article.nom, fontSize = 16.sp)
+        "code barre" -> Text("${article.codebarre}", fontSize = 16.sp)
+        "marque" ->     Text(article.marque, fontSize = 16.sp)
+        "prix" ->       Text("${article.prix}", fontSize = 16.sp)
     }
 }
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'org.jetbrains.kotlin.android'\r\n    id 'com.google.devtools.ksp' version '1.6.10-1.0.2'\r\n\r\n}\r\n\r\nandroid {\r\n    namespace 'com.example.appvigile3'\r\n    compileSdk 33\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.appvigile3\"\r\n        minSdk 24\r\n        targetSdk 33\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables {\r\n            useSupportLibrary true\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n    buildFeatures {\r\n        compose true\r\n    }\r\n    composeOptions {\r\n        kotlinCompilerExtensionVersion '1.3.2'\r\n    }\r\n    packagingOptions {\r\n        resources {\r\n            excludes += '/META-INF/{AL2.0,LGPL2.1}'\r\n        }\r\n    }\r\n    buildToolsVersion '30.0.3'\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation 'androidx.core:core-ktx:1.10.0'\r\n    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'\r\n    implementation 'androidx.activity:activity-compose:1.7.1'\r\n    implementation platform('androidx.compose:compose-bom:2022.10.00')\r\n    implementation 'androidx.compose.ui:ui'\r\n    implementation 'androidx.compose.ui:ui-graphics'\r\n    implementation 'androidx.compose.ui:ui-tooling-preview'\r\n    implementation 'androidx.compose.material3:material3'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.5'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\r\n    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')\r\n    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'\r\n    debugImplementation 'androidx.compose.ui:ui-tooling'\r\n    debugImplementation 'androidx.compose.ui:ui-test-manifest'\r\n\r\n    implementation 'mysql:mysql-connector-java:5.1.46' // NE PAS CHANGER VERSION\r\n\r\n    //def nav_version = \"2.5.3\"\r\n    //implementation \"androidx.navigation:navigation-compose:$nav_version\"\r\n\r\n}\r\n\r\nconfigurations.implementation {\r\n    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision df71a4c55a8a25895e787906ef1c5f09f4b865bd)
+++ b/app/build.gradle	(date 1685609188897)
@@ -69,8 +69,7 @@
 
     implementation 'mysql:mysql-connector-java:5.1.46' // NE PAS CHANGER VERSION
 
-    //def nav_version = "2.5.3"
-    //implementation "androidx.navigation:navigation-compose:$nav_version"
+    implementation 'androidx.navigation:navigation-compose:2.5.3'
 
 }
 
